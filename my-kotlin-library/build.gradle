buildscript {
  ext.kotlin_version = '1.1.4-3'
  ext.dokka_version = '0.9.15'

  repositories {
    jcenter()
    mavenCentral()
    maven { url "https://jitpack.io" }
  }
  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    classpath "org.jetbrains.dokka:dokka-gradle-plugin:${dokka_version}"
    classpath 'me.trnl:github-release-gradle-plugin:0.1'
  }
}
allprojects {
        repositories {
            jcenter()
            maven { url "https://jitpack.io" }
        }
   }

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'org.jetbrains.dokka'
//apply plugin: 'maven-publish'
apply plugin: 'github'
apply plugin: 'release'

group = 'com.github.DanielMeachum'

group = 'org.gradle.MyLibrary'
version = '0.0.1'

repositories {
  mavenCentral()
}

dependencies {
  compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
  testCompile 'junit:junit:4.11'
  testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
  compile 'com.github.jitpack:gradle-simple:1.0'
}

dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/javadoc"
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            // change to point to your repo, e.g. http://my.org/repo
            url "https://github.com/DanielMeachum/AndroidNetworking"
        }
    }
}

github {
    repo = 'DanielMeachum@ghttps://github.com/DanielMeachum/AndroidNetworking.git'
    credentials {
        username = 'DanielMeachum'
        password = 'PCN-5w3-Uqz-XYY'
    }
}

release {
    /* Let's check that everything is committed */
    doFirst {
        if (!project.git.status().isEmpty()) {
            throw new GradleException('You have uncommitted changes.')
        }
    }

    /* Ask user for a release version, suggesting some default variant. */
    version = { console.prompt(' > Please enter release version:', project.version - '-SNAPSHOT') }
    tag = { "r$project.release.version" }
    commitMessage = { "Release $project.release.version" }

    /* Files and projects that needs to be updated with a new release version. */
    update {
        file project('driver-compat').file('src/main/com/mongodb/Mongo.java')
        file project.file('build.gradle')
        projects allprojects
    }

    /* Spec for next version. As above, asking user input. */
    next {
        version = { console.prompt(' > Please enter next version:', bumpVersion(project.release.version)) }
        commitMessage = { "Bumping version to $project.release.next.version" }
    }

    /* Tasks that needs to be performed during release. Will be done after tag step. */
    dependsOn subprojects.findAll { it.name != 'util' }*.install
    dependsOn project('driver').uberJar
    dependsOn project('driver-compat').uberJar
    dependsOn publishWiki
    dependsOn draftGhRelease
}
